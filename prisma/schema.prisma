// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  email       String
  password    String 
  token       String?
  role        Role     @default(CUSTOMER)
  name        String 
  birthDate   DateTime

  images Image[] @relation("ImagableLike")
  reviews Review[]
  sellerProducts Product[]
  cartProducts CartProduct[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("users")
}

model Type {
  id          Int      @id @default(autoincrement())
  name        String
  properties  Property[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("types")
}

model Property {
  id          Int      @id @default(autoincrement())
  name        String

  type        Type @relation(fields: [typeId], references: [id])
  typeId      Int  

  category        Category? @relation(fields: [categoryId], references: [id])
  categoryId      Int?

  productProperty ProductProperty[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("properties")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String

  properties Property[]
  products Product[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("categories")
}


model Product {
  id          Int      @id @default(autoincrement())
  name        String
  price       Float

  properties ProductProperty[]
  reviews Review[]
  images Image[] @relation("ImagableLike")

  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  Int

  seller      User @relation(fields: [sellerId], references: [id])
  sellerId    Int

  userCartProducts CartProduct[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("products")
}

model ProductProperty {
  value        String

  product    Product @relation(fields: [productId], references: [id])
  productId  Int

  property   Property @relation(fields: [propertyId], references: [id])
  propertyId Int

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@id([propertyId, productId])

  @@map("product_property")
}

model Review {
  id          Int      @id @default(autoincrement())
  rating      Float
  text        String

  user        User @relation(fields: [userId], references: [id])
  userId      Int

  product     Product @relation(fields: [productId], references: [id])
  productId   Int

  images Image[] @relation("ImagableLike")

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("reviews")
}

model CartProduct {
  user        User @relation(fields: [userId], references: [id])
  userId      Int

  product     Product @relation(fields: [productId], references: [id])
  productId   Int

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@id([userId, productId])

  @@map("cart_product")
}

model Image {
  id Int @id @default(autoincrement())
  url String

  User User? @relation("ImagableLike", fields: [imagableId], references: [id], map: "user_imagableId")
  Review Review? @relation("ImagableLike", fields: [imagableId], references: [id], map: "review_imagableId")
  Product Product? @relation("ImagableLike", fields: [imagableId], references: [id], map: "product_imagableId")

  imagableId   Int?
  imagableType ImagableType?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("images")
}

enum Role {
  ADMIN
  CUSTOMER
  SELLER
}

enum ImagableType {
  User
  Product
  Review
}